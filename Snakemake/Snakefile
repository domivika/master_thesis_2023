# Define reference genome path
reference = "/lustre1/project/stg_00096/references/GRCh38.alt-masked-V2/fasta/Homo_sapiens_assembly38_masked.fasta"

# Define samples using glob_wildcards
samples, = glob_wildcards("/staging/leuven/stg_00096/home/dkresa/ResolveOME/single_cell/230623.NovaSeq2.FCA/1277/{sample}.fastq.gz")

# List all the FastQC output files without wildcards
fastqc_output_files = ["/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/QC/1_premap/{sample}_fastqc.zip".format(sample=sample) for sample in samples]

# List all the trimmed FASTQ files without wildcards
trimmed_fastq_R1 = ["/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/trimmed/{sample}_R1_001.trimmed.fastq.gz".format(sample=sample) for sample in samples]
trimmed_fastq_R2 = ["/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/trimmed/{sample}_R2_001.trimmed.fastq.gz".format(sample=sample) for sample in samples]

# List all the BWA MEM output SAM files without wildcards
bwa_output_sam_files = ["/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/bwa/{sample}.sam".format(sample=sample) for sample in samples]


rule all:
    input:
        fastqc_zip = fastqc_output_files,
        multiqc_report = "/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/QC/1_premap/multiqc_report.html",
        trimmed_fastq_R1 = trimmed_fastq_R1,
        trimmed_fastq_R2 = trimmed_fastq_R2,
        bwa_sam = bwa_output_sam_files

# Rule for quality control (FastQC):
rule fastqc:
    input:
        fq = "/staging/leuven/stg_00096/home/dkresa/ResolveOME/single_cell/230623.NovaSeq2.FCA/1277/{sample}.fastq.gz"
    output:
        zip = "/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/QC/1_premap/{sample}_fastqc.zip",
        html = "/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/QC/1_premap/{sample}_fastqc.html"
    shell:
        """
        echo "Input Fastq: {input.fq}"
        fastqc -o /staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/QC/1_premap {input.fq} 
        """

# Rule for removing adapter sequences and filtering low-quality reads
rule trimmomatic:
    input:
        left_fastq = "/staging/leuven/stg_00096/home/dkresa/ResolveOME/single_cell/230623.NovaSeq2.FCA/1277/{sample}_R1_001.fastq.gz",
        right_fastq = "/staging/leuven/stg_00096/home/dkresa/ResolveOME/single_cell/230623.NovaSeq2.FCA/1277/{sample}_R2_001.fastq.gz",
        adapters_i1 = "/staging/leuven/stg_00096/home/dkresa/ResolveOME/single_cell/230623.NovaSeq2.FCA/1277/{sample}_I1_001.fastq.gz",
        adapters_i2 = "/staging/leuven/stg_00096/home/dkresa/ResolveOME/single_cell/230623.NovaSeq2.FCA/1277/{sample}_I2_001.fastq.gz"
    output:
        trimmed_left = "/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/trimmed/{sample}_R1_001.trimmed.fastq.gz",
        trimmed_right = "/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/trimmed/{sample}_R2_001.trimmed.fastq.gz"
    params:
        seed_mismatches = 2,
        palindrome_clip_threshold = 30,
        simple_clip_threshold = 10
    shell:
        """
        java -jar $EBROOTTRIMMOMATIC/trimmomatic-0.39.jar PE -threads 8 \
            {input.left_fastq} {input.right_fastq} \
            {output.trimmed_left} {output.trimmed_left}.unpaired.gz \
            {output.trimmed_right} {output.trimmed_right}.unpaired.gz \
            ILLUMINACLIP:{input.adapters_i1}:{input.adapters_i2}:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36
        """

# Rule for running BWA MEM alignment
rule bwa_mem:
    input:
        fq1 = "/staging/leuven/stg_00096/home/dkresa/ResolveOME/single_cell/230623.NovaSeq2.FCA/1277/{sample}_R1.fastq.gz",
        fq2 = "/staging/leuven/stg_00096/home/dkresa/ResolveOME/single_cell/230623.NovaSeq2.FCA/1277/{sample}_R2.fastq.gz",
        ref = reference
    output:
        sam = "/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/bwa/{sample}.sam"
    shell:
        """
        bwa mem -t 8 {input.ref} {input.fq1} {input.fq2} > {output.sam}
        """




# Rule for read alignment (BWA)
rule bwa:
    input:
        fq1 = "/staging/leuven/stg_00096/home/dkresa/ResolveOME/single_cell/230623.NovaSeq2.FCA/1277/{sample}_R1_001.fastq.gz",
        fq2 = "/staging/leuven/stg_00096/home/dkresa/ResolveOME/single_cell/230623.NovaSeq2.FCA/1277/{sample}_R2_001.fastq.gz",
        index1 = "/staging/leuven/stg_00096/home/dkresa/ResolveOME/single_cell/230623.NovaSeq2.FCA/1277/{sample}_I1_001.fastq.gz",
        index2 = "/staging/leuven/stg_00096/home/dkresa/ResolveOME/single_cell/230623.NovaSeq2.FCA/1277/{sample}_I2_001.fastq.gz"
    output:
        bam = "/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/bwa/{sample}.bam",
        bai = "/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/bwa/{sample}.bam.bai"
    params:
        ref = reference
    shell:
        """
        bwa mem {params.ref} {input.fq1} {input.fq2} {input.index1} {input.index2} \
            | samtools sort - \
            > {output.bam}
        samtools index {output.bam}
        """
