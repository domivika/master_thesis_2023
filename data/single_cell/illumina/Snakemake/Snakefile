import os

# Define reference genome path
reference = "/lustre1/project/stg_00096/references/GRCh38.alt-masked-V2/index/bwa-mem2/Homo_sapiens_assembly38_masked.fasta"

# Define samples using glob_wildcards
samplesR, = glob_wildcards("/staging/leuven/stg_00096/home/dkresa/ResolveOME/single_cell/230623.NovaSeq2.FCA/1277/{sampleR}.fastq.gz")

# Filter samples to exclude those with "I1" or "I2" in their names
samplesR = [sampleR for sampleR in samplesR if "I1" not in sampleR and "I2" not in sampleR]

# Define samples using glob_wildcards
samples_R1, = glob_wildcards("/staging/leuven/stg_00096/home/dkresa/ResolveOME/single_cell/230623.NovaSeq2.FCA/1277/{sample}_R1_001.fastq.gz")
samples_R2, = glob_wildcards("/staging/leuven/stg_00096/home/dkresa/ResolveOME/single_cell/230623.NovaSeq2.FCA/1277/{sample}_R2_001.fastq.gz")

# Define samples based on a lane
samples_L1, = glob_wildcards("/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/bwa/{sampleL}_L001.sorted.markdup.bam")
samples_L2, = glob_wildcards("/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/bwa/{sampleL}_L002.sorted.markdup.bam")
samples_L3, = glob_wildcards("/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/bwa/{sampleL}_L003.sorted.markdup.bam")
samples_L4, = glob_wildcards("/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/bwa/{sampleL}_L004.sorted.markdup.bam")

# List output files
fastqc_output_files = expand("/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/QC/1_premap/{sampleR}_fastqc.zip", sampleR=samplesR)
multiqc_report = "/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/QC/1_premap/multiqc_report.html"
bams = expand("/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/bwa/{sample}.bam", sample=samples_R1)
bam_sorted = expand("/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/bwa/{sample}.sorted.bam.bai", sample=samples_R1)
bam_markdup = expand("/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/bwa/{sample}.sorted.markdup.bam.bai", sample=samples_R1)
bam_merged = expand("/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/bam_merged/{sampleL}.bam.bai", sampleL=samples_L1)
wgs_metrics = expand("/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/QC/2_postmap/{sampleL}_wgs_metrics.txt", sampleL=samples_L1)
alignment_summary_metrics = expand("/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/QC/2_postmap/{sampleL}_alignment_summary_metrics.txt", sampleL=samples_L1)
gvcf = expand("/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/gvcf/{sampleL}.g.vcf", sampleL=samples_L1)
cohort_gvcf = expand("/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/gvcf/cohort.g.vcf", sampleL=samples_L1)
vcf = expand("/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/vcf/cohort.vcf", sampleL=samples_L1)

rule all:
    input:
        bams,
        bam_sorted,
        bam_markdup,
        bam_merged,
        wgs_metrics,
        alignment_summary_metrics,
        gvcf,
        cohort_gvcf,
        vcf
        
# Rule for quality control (FastQC):
rule fastqc:
    input:
        fq = "/staging/leuven/stg_00096/home/dkresa/ResolveOME/single_cell/230623.NovaSeq2.FCA/1277/{sampleR}.fastq.gz"
    output:
        zip = "/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/QC/1_premap/{sampleR}_fastqc.zip",
        html = "/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/QC/1_premap/{sampleR}_fastqc.html"
    threads: 1
    shell:
        """
        echo "Input Fastq: {input.fq}"
        fastqc -o /staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/QC/1_premap {input.fq}
        """

# Rule for generating MultiQC report
rule multiqc:
    input:
        report_files = fastqc_output_files
    output:
        html_report = "/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/QC/1_premap/multiqc_report.html"
    threads: 1
    shell:
        """
        echo "Input Multiqc: {input.report_files}"
        multiqc -f -o /staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/QC/1_premap {input.report_files}
        """

# Rule for BWA MEM2 alignment
rule bwa_mem2:
    input:
        fq1 = "/staging/leuven/stg_00096/home/dkresa/ResolveOME/single_cell/230623.NovaSeq2.FCA/1277/{sample}_R1_001.fastq.gz",
        fq2 = "/staging/leuven/stg_00096/home/dkresa/ResolveOME/single_cell/230623.NovaSeq2.FCA/1277/{sample}_R2_001.fastq.gz",
        ref = reference,
        report_files = multiqc_report
    threads: 24
    output:
        bam = "/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/bwa/{sample}.bam"
    shell:
        """
        /lustre1/project/stg_00096/software/bwa-mem2-2.2.1_x64-linux/bwa-mem2 mem \
        -t {threads} \
        -M \
        -R "@RG\tID:{wildcards.sample}\tPL:ILLUMINA\tSM:{wildcards.sample}" {input.ref} \
        {input.fq1} {input.fq2} \
        | samtools view -Sb -> {output.bam}
        """

# Rule for sorting and indexing BAM files
rule sort_and_index:
    input:
        bam = "/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/bwa/{sample}.bam"
    output:
        sorted_bam = "/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/bwa/{sample}.sorted.bam",
        bam_index = "/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/bwa/{sample}.sorted.bam.bai"
    threads: 24
    shell:
        """
        samtools sort -@ {threads} -o {output.sorted_bam} {input.bam}
        samtools index {output.sorted_bam} {output.bam_index}
        """

# Rule for marking duplicates using MarkDuplicates
rule mark_duplicates:
    input:
        sorted_bam = "/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/bwa/{sample}.sorted.bam"
    output:
        bam_markdup = "/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/bwa/{sample}.sorted.markdup.bam",
        bam_markdup_index = "/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/bwa/{sample}.sorted.markdup.bam.bai"
    threads: 24
    shell:
        """
        java -jar $EBROOTPICARD/picard.jar MarkDuplicates \
        INPUT={input.sorted_bam} \
        OUTPUT={output.bam_markdup} \
        METRICS_FILE={output.bam_markdup}.metrics.txt
        """

# Rule for merging sorted BAM files by lanes
rule merge_sorted_bam:
    input:
        bam_sorted_L1 = "/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/bwa/{sampleL}_L001.sorted.markdup.bam",
        bam_sorted_L2 = "/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/bwa/{sampleL}_L002.sorted.markdup.bam",
        bam_sorted_L3 = "/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/bwa/{sampleL}_L003.sorted.markdup.bam",
        bam_sorted_L4 = "/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/bwa/{sampleL}_L004.sorted.markdup.bam"
    output:
        merged_bam = "/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/bam/{sampleL}.bam",
        merged_bai = "/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/bam/{sampleL}.bam.bai"
    threads: 24
    shell:
        """
        samtools merge -@ {threads} {input.bam_sorted_L1} {input.bam_sorted_L2} {input.bam_sorted_L3} {input.bam_sorted_L4} -o {output.merged_bam}
        samtools index {output.merged_bam} -o {output.merged_bai}
        """

# Rule for quality control after mapping using picard CollectWgsMetrics
rule CollectWgsMetrics:
    input:
        bam_markdup = "/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/bam/{sampleL}.bam",
        ref = reference
    output:
        wgs_metrics = "/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/QC/2_postmap/{sampleL}_wgs_metrics.txt"
    threads: 1
    shell:
        """
        java -jar $EBROOTPICARD/picard.jar CollectWgsMetrics \
        I={input.bam_markdup} \
        O={output.wgs_metrics} \
        R={input.ref}
        """

# Rule for quality control after mapping using picard CollectAlignmentSummaryMetrics
rule CollectAlignmentSummaryMetrics:
    input:
        bam_markdup = "/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/bam/{sampleL}.bam",
        ref = reference
    output:
        alignment_summary_metrics = "/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/QC/2_postmap/{sampleL}_alignment_summary_metrics.txt"
    threads: 1
    shell:
        """
        java -jar $EBROOTPICARD/picard.jar CollectAlignmentSummaryMetrics \
        I={input.bam_markdup} \
        O={output.alignment_summary_metrics} \
        R={input.ref}
        """

# Rule for haplotype calling
rule haplotype_calling:
    input:
        ref = reference,
        bam_markdup = "/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/bam/{sampleL}.bam"
    output:
        gvcf = "/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/gvcf/{sampleL}.g.vcf"
    threads: 24
    shell:
        """
        gatk --java-options "-Xmx4g" HaplotypeCaller  \
        -R {input.ref} \
        -I {input.bam_markdup} \
        -O {output.gvcf} \
        -ERC GVCF
        """

# Rule for GVCFs combining
rule combine_gvcfs:
    input:
        gvcf = gvcf,
        ref = reference
    output:
        cohort_gvcf = "/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/gvcf/cohort.g.vcf"
    threads: 24
    shell:
        """
        gatk --java-options "-Xmx4g" CombineGVCFs \
        -R {input.ref} \
        -V {input.gvcf} \
        -O {output.cohort_gvcf}
        """

# Rule for joint genotyping
rule joint_genotyping:
    input:
        cohort_gvcf = "/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/gvcf/cohort.g.vcf",
        ref = reference
    output:
        vcf = "/staging/leuven/stg_00096/home/dkresa/data/single_cell/230623.NovaSeq2.FCA/vcf/cohort.vcf"
    threads: 24
    shell:
        """
        gatk --java-options "-Xmx4g" GenotypeGVCFs \
        -R {input.ref} \
        -V {input.cohort_gvcf} \
        -O {output.vcf}
        """
